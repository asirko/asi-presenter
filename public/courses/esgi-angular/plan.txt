Jour 1 (4 créneaux de 1h30, total 6h)

1. Introduction & mise en place de l’environnement (1h30)
Objectifs :
Présenter les objectifs du cours et l’organisation générale (cours + TP).
Introduction rapide aux frameworks front-end et à la place d’Angular dans l’écosystème web.
Installation des outils : Node.js, Angular CLI, éditeur (VSCode ou autre).
Création du projet Angular de base.
TP :
Initialiser un projet Angular vide (« angular-books » par exemple).
Vérifier que l’application tourne (ng serve).

2. Rappels TypeScript & structure d’un projet Angular (1h30)
Objectifs :
Rappeler les bases de TypeScript (typage, classes, interfaces, etc.) pour ceux qui en ont besoin.
Expliquer la structure d’un projet Angular (fichiers, dossier src/app, modules, etc.).
Présentation du rôle des modules et du fichier app.module.ts.
Présentation rapide de l’Angular CLI (génération de composants, services…).
TP :
Dans le projet, créer quelques classes TS simples (Book, Author, etc.) pour modéliser les données.
Découvrir et tester les commandes CLI (générer un composant, un module, un service factice…).

3. Composants, templates et data binding (1h30)
Objectifs :
Comprendre la notion de composant : décorateur @Component, métadonnées (selector, template, style).
Data binding : interpolation ({{ }}), property binding ([property]="expression"), event binding ((event)="handler()"), two-way binding ([(ngModel)]).
Structure de base d’un composant.
TP :
Créer un composant « BookListComponent » pour afficher une liste de livres (d’abord en dur).
Mise en place d’un modèle de liste de livres et utilisation du data binding pour les afficher.

4. Directives et Pipes (1h30)
Objectifs :
Découvrir les directives structurelles (*ngIf, *ngFor) et d’attribut ([ngClass], [ngStyle]).
Introduction aux pipes : formatage (date, currency, custom pipe).
TP :
Améliorer l’affichage de la liste de livres avec *ngFor et des Pipes (DatePipe pour la date de publication, par exemple).
Gérer l’affichage conditionnel d’informations (disponibilité du livre, etc.).
Jour 2 (5 créneaux de 1h30, total 7h30)

5. Services & Injection de dépendances (1h30)
Objectifs :
Comprendre le rôle des services dans Angular pour la logique métier et l’accès aux données.
Expliquer l’injection de dépendances (DI) et le fonctionnement du provider (dans @Injectable).
TP :
Créer un service « BookService » pour gérer les livres (stocker/retourner une liste de livres).
Appeler ce service depuis « BookListComponent » au lieu du code en dur.

6. Observables & RxJS (1h30)
Objectifs :
Comprendre le concept d’observable et son utilisation dans Angular (service HTTP, événements…).
Présenter quelques opérateurs de base (map, filter, etc.) et la notion de subscription.
Différence entre Observable et Promise (vue d’ensemble).
TP :
Modifier le service pour retourner un Observable simulé (par exemple, of(books)).
Souscrire à l’Observable dans le composant (subscribe) et gérer l’affichage des données.

7. Routing & navigation (1h30)
Objectifs :
Comprendre la configuration du routing dans Angular (RouterModule, Routes).
Générer plusieurs composants (ex: Home, BookList, BookDetails) et configurer les routes associées.
Navigation et passage de paramètres (route param).
TP :
Mettre en place un module de routing basique (AppRoutingModule).
Créer et configurer une route pour lister les livres, et une route pour les détails d’un livre.
Naviguer d’un composant à l’autre via <routerLink>.

8. Formulaires & validation (1h30)
Objectifs :
Présenter les deux approches de formulaires dans Angular :
Template-driven forms (avec ngModel).
Reactive forms (avec FormControl, FormGroup, etc.).
Gestion des validations (HTML5, validators Angular, messages d’erreurs).
TP :
Créer un formulaire pour ajouter ou éditer un livre.
Gérer les validations de base (titre requis, date valide, etc.).

9. Accès HTTP & intégration REST (1h30)
Objectifs :
Utiliser le module HttpClientModule et le service HttpClient pour communiquer avec une API REST.
Méthodes (GET, POST, PUT, DELETE) et gestion des promesses / observables.
Gestion basique des erreurs.
TP :
Simuler ou utiliser un backend mocké (via un fichier JSON ou un outil comme json-server).
Remplacer la liste de livres en dur par des requêtes HTTP.
Envoyer un nouveau livre via un POST, etc.
Jour 3 (5 créneaux de 1h30, total 7h30)

10. Approfondissement : gestion d’état, organisation du code (1h30)
Objectifs :
Aborder la question de la gestion d’état (sans nécessairement entrer dans NgRx si c’est trop avancé).
Meilleures pratiques d’architecture Angular (feature modules, shared modules, etc.).
Notions d’optimisation basique (lazy loading de modules, par ex. pour le routing).
TP :
Réorganiser le code de l’application en feature modules (ex: BookModule).
Mise en place d’un lazy loading éventuel pour un module si le temps le permet.

11. Tests unitaires & tests end-to-end (1h30)
Objectifs :
Présentation des tests unitaires avec Jasmine/Karma.
Présentation des tests end-to-end (E2E) avec Protractor ou Cypress (selon environnement).
Écrire quelques tests unitaires sur un service et un composant simple.
TP :
Configurer un test sur le service BookService.
Tester un composant avec le TestBed.

12. Finalisation & points avancés (1h30)
Objectifs :
Revoir les bonnes pratiques Angular (structure du code, nomenclature, accessibilité…).
Approfondir un sujet si le groupe est à l’aise : guards de route, interception HTTP, directives personnalisées, etc.
TP :
Continuer à implémenter des fonctionnalités avancées dans le TP (authentification, guard, etc.), selon le niveau et le temps.

13. Finaliser l’application & revue de code (1h30)
Objectifs :
Consolidation du TP : s’assurer que toutes les fonctionnalités clés sont en place.
Revue de code collective : identifier les points forts et les points d’amélioration.
Préparation pour le rendu final (structure, propreté du code, README, etc.).
TP :
Finaliser complètement l’appli : affichage, formulaire d’ajout, édition, suppression, navigation complète, etc.
Vérifier que tout fonctionne (build, test, routing).

14. Rendu du TP, évaluation & conclusion (1h30)
Objectifs :
Chaque étudiant remet son projet (sous forme de code sur un repo ou archive).
Questions/réponses sur ce qui a été fait, retours personnalisés.
Conclusion et ouverture (vue d’ensemble du développement front-end, autres frameworks, etc.).
